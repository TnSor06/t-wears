- React ContextAPI:
    1. Pass states in some context object which can be passed to components
    2. Only use react since redux is not needed and ContextAPI is inbuilt
    3. Easier way to pass around value from parent to deeply nested component
        So that child looks for a provider from where the data came rather than passing props from parent to child
    Setup: 
        1. Create contexts folder in src and then create subsequent contexts folder like collections, shop
        2. In these folders create a file e.g. collections.context.js
            collections.context.js
                import { createContext } from "react";
                import SHOP_DATA from "./shop.data";
                // It is a method that can take any data type
                // SHOP_DATA is init value
                const CollectionsContext = createContext(SHOP_DATA);

                export default CollectionsContext;
            collection.component.jsx: Method 1: Context as a component and wrap part of application where u want access
                // Import CollectionsContext
                import CollectionsContext from "../../contexts/collections/collections.context";

                // There is a consumer(get) and provider(set)
                const CollectionPage = ({ match }) => {
                    return (
                        <CollectionsContext.Consumer>
                        {(collections) => {
                            // Parameters passed as a function
                            const { title, items } = collections[match.params.collectionId];
                            return (
                            <div className="collection-page">
                                <h2 className="title">{title}</h2>
                                <div className="items">
                                {items.map((item) => (
                                    <CollectionItem key={item.id} item={item} />
                                ))}
                                </div>
                            </div>
                            );
                        }}
                        </CollectionsContext.Consumer>
                    );
                };

                export default CollectionPage;

                collection.component.jsx: Method 2: useContext hook from react
                    // Import CollectionsContext
                    import CollectionsContext from "../../contexts/collections/collections.context";

                    import { useContext } from "react";
                    const CollectionPage = ({ match }) => {
                    const collections = useContext(CollectionsContext);
                    const { title, items } = collections[match.params.collectionId];
                        return (
                            <div className="collection-page">
                                <h2 className="title">{title}</h2>
                                <div className="items">
                                    {items.map((item) => (
                                    <CollectionItem key={item.id} item={item} />
                                    ))}
                                </div>
                            </div>
                        );
                    };

                    export default CollectionPage;
        3. Dynamically Setting value in Context Provider:
            Consumer looks for Provider to get value else it looks for init value of Context
                user.context.js
                    import { createContext } from "react";

                    const UserContext = createContext(undefined);

                    export default UserContext;
                cart.context.js
                    import { createContext } from "react";

                    const CartContext = createContext({
                        hidden: true,
                        toggleHidden: () => {},
                    });

                    export default CartContext;

                App.js
                    // Working with Provider
                    import UserContext from "./contexts/user/user.context";

                    class App extends React.Component {
                        constructor(props) {
                            super(props);
                            this.state = {
                            currentUser: null,
                            };
                        }
                        unsubscribeFromAuth = null;

                        componentDidMount() {
                            this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {
                            if (userAuth) {
                                const userRef = await createUserProfileDocument(userAuth);

                                userRef.onSnapshot((snapShot) => {
                                this.setState({
                                    currentUser: {
                                    id: snapShot.id,
                                    ...snapShot.data(),
                                    },
                                });
                                });
                            }

                            this.setState({ currentUser: userAuth });
                            });
                        }

                        componentWillUnmount() {
                            this.unsubscribeFromAuth();
                        }

                        render() {
                            // Value is passed via Provider and whenever currentUser changes it re-renders
                            return (
                            <div>
                                <UserContext.Provider value={this.state.currentUser}>
                                    <Header />
                                </UserContext.Provider>
                                <Switch>
                                    <Route exact path="/" component={HomePage} />
                                    <Route path="/shop" component={ShopPage} />
                                    <Route exact path="/checkout" component={CheckoutPage} />
                                    <Route
                                        exact
                                        path="/signin"
                                        render={() =>
                                        this.state.currentUser ? (
                                            <Redirect to="/" />
                                        ) : (
                                            <SignInAndSignUpPage />
                                        )
                                        }
                                    />
                                </Switch>
                            </div>
                            );
                        }
                    }

                    export default App;
                header.component.jsx

                    // Getting Data from Provider using Context.Consumer or UseContext Hook
                    import { useContext, useState } from "react";
                    import UserContext from "../../contexts/user/user.context";
                    import CartContext from "../../contexts/cart/cart.context";
                    const Header = () => {
                    const currentUser = useContext(UserContext);
                    const [hidden, setHidden] = useState(true);
                    // Passing this toggleHidden to Context
                    const toggleHidden = () => {
                        setHidden(!hidden);
                    };

                    return (
                        <div className="header">
                        <Link className="logo-container" to="/">
                            <Logo className="logo" />
                        </Link>
                        <div className="options">
                            <Link className="option" to="/shop">
                            SHOP
                            </Link>
                            <Link className="option" to="/shop">
                            CONTACT
                            </Link>
                            {currentUser ? (
                            <div className="option" onClick={() => auth.signOut()}>
                                SIGN OUT
                            </div>
                            ) : (
                            <Link className="option" to="/signin">
                                SIGN IN
                            </Link>
                            )}
                            <CartContext.Provider
                            value={{
                                hidden: hidden,
                                toggleHidden: toggleHidden,
                            }}
                            >
                            <CartIcon />
                            </CartContext.Provider>
                        </div>

                        {hidden ? null : <CartDropdown />}
                        </div>
                    );
                    };

                    export default Header;
                cart-icon.component.jsx

                    // React Context for cart
                    import { useContext } from "react";
                    import CartContext from "../../contexts/cart/cart.context";
                    const CartIcon = ({ itemCount }) => {
                    const { toggleHidden } = useContext(CartContext);
                    return (
                        <div className="cart-icon" onClick={toggleHidden}>
                        <ShoppingIcon className="shopping-icon" />
                        <span className="item-count">{itemCount}</span>
                        </div>
                    );
                    };

                    const mapStateToProps = createStructuredSelector({
                    itemCount: selectCartItemsCount,
                    });

                    export default connect(mapStateToProps, null)(CartIcon);
        
        4. Provider Context Pattern
            It allow us to provide data like redux from a single data store 
            Setup:
                1. Create providers folder in the src and then create subsequent provider folder like collections, shop
                2. In these folders create a file e.g. collections.provider.jsx(since it is a component)
                cart.provider.jsx -> index.js-> header.component.jsx->cart-icon.component.jsx->cart-dropdown.component.jsx->collection-item.component.jsx
                checkout-item.component.jsx->checkout.component.jsx
    - Redux vs ContextAPI
        1. Redux provide persist and logger because of development in community
        2. Context API is lightweigth solution to local storage management
        3. Context API trades ease and efficeincy for flexibility of redux like sagas, thunk and async action and recomposibilty of component using connect.mapStateToProps,mapDispatchToProps
        4. Context API tighly couples the API making it difficult to reuse because of pattern Provider and Consumer
        5. Provider wrapping becames heavy because of multiple provider compared to Redux Provider which is a single
        6. Redux should be used for Large Apps, ContextAPI for small scale application
