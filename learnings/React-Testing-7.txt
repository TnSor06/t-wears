React Testing:
    - As complexity increases we test each component based on unit, integration
    - Ran before releasing to production to check if it works as intended
    - TDD: Writing code with the test.
    - Tools: 
        1. Testing Library, Assertion Library, Test Runner, "Mock,Spy,Stub", Code coverage:
            - Jasmine, Jest, Mocha/ Chai (These lib does all work mentioned above)
        - Assertion Library asserts if the value expected is same or not while testing.
        - Spy provide information about functions; Stub replace selected function to ensure expected behavior happens; Mocks mean faking execution the function
        - Check Puppeteer by Google
        - Behavior Driven Development
        - Snapshot testing(Jest) and Enzyme
        2. Code Coverage
        - npm test -- --coverage
    A. Unit Testing
        - Should Cover all small functions of application
        - One thing at a time like a component so one unit test of the function
        - It should have no side effect (Affecting other function).
    B. Integration Testing
        - Cross-Communication between units of code
        - Spy expected side effect from one component to another
        - Connecting component how they work together
        - We are never sure if test is perfect
    C. Automation Testing
        - UI test always running in browser like click, type, scroll
        - WebDriver I/O, TestCafe, Nightmare.js
        - End-to-End testing(test entire process)
    - Production Testing: Puppeteer, DOM in App.js
        Development Testing: Jest, jsdom in App.test.js
    - Working with jest: Check parcel folder
        npm i jest --save-dev
        - jest looks for __test__ folder or file.test.js
        - basics: script.test.js
    - Async test
        npm i node-fetch : TO make fetch calls in node
        - Use assertions
        - Use done or return(for last promise)
    - Mocks and Spies
        - Many tests takes long time to run each test
        - Mocks helps in faking a function adn pretend to replace something
        - Usually used to replace dependencies
        - Spies let you check behavior of mock function wrt original function
    
    Testing React Component:(Check t-wears folder)
        - npm i --save-dev enzyme enzyme-adapter-react-16 react-test-renderer jest-enzyme
        - Setting Up enzyme by docs
            + setupTests.js
            + package.json "test:coverage" to check code coverage
        - shallow, mount, render
            - shallow component test checks a component and not on its child
        1. Basic Testing:
            + TestComponent.test.js
        2. Snapshot testing
            - Creates a snapshot of the component and saves it in snapshot folder 
            - So if there are any changes wrt new changes it shows
        3. Testing component with props
            - Create a mock function which passes props
        